server.port: ${SERVER_PORT}

spring:
  application:
    name: ${SPRING_APPLICATION_NAME}
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
  sql.init:
    mode: always
    schema-locations: classpath:schema.sql
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI}
      client:
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_ISSUER_URI}
        registration:
          bank_transfer:
            provider: keycloak
            authorizationGrantType: client_credentials
            client-id: ${KEYCLOAK_CLIENT_ID}
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            clientAuthenticationMethod: client_secret_post
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties.spring.json.type.mapping: note:com.github.mrchcat.shared.notification.BankNotificationDto
      acks: all

management:
  endpoints.web.exposure.include: info, health,metrics,prometheus
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_ENDPOINT}
  tracing:
    sampling:
      probability: ${ZIPKIN_TRACING_PROBABILITY}
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true



logging:
  pattern.file: "%d{HH:mm:ss} %-5level %logger{36} - %msg%n"
  level:
    root: ${LOG_LEVEL:DEBUG}
    org.zalando.logbook: ${LOG_LEVEL:DEBUG}

application:
  service:
    urls:
      account: ${SERVICE_URL_ACCOUNT}
      exchange: ${SERVICE_URL_EXCHANGE}
      blocker: ${SERVICE_URL_BLOCKER}
      transfer: ${SERVICE_URL_TRANSFER}
  kafka:
    topic:
      notifications: ${KAFKA_NOTIFICATIONS_TOPIC}